any(na_rows)
print(paste0(ranges$name[k], " @ ", d[na_rows, 1], " is NA at all stations!"))
na_rows=c(1,5,3000)
print(paste0(ranges$name[k], " @ ", d[na_rows, 1], " is NA at all stations!"))
for (k in 1:nrow(ranges)) {
ifile=paste(idir,"/",ranges$name[k],"_data.dat",sep="")
d= read.table(ifile,header=TRUE, sep="\t", stringsAsFactors=FALSE, check.names=FALSE)
for (col in 2:ncol(d)) {
rows= which((d[,col] != ranges$miss[k]) & ((d[,col] < ranges$llim[k]) | (d[,col] > ranges$ulim[k])))
if (length(rows) > 0) {
print(paste(ranges$name[k]," @ ",names(d)[col],": ",length(rows)," implausible values.",sep=""))
if (show_bad_values) {
for (row in rows) {
print(paste(ranges$name[k]," @ ",names(d)[col]," on ",d[row,1],": ",d[row,col],sep=""))
}
}
d[rows,col]= ranges$miss[k]
}
}
# check if there is a row with NA values (many of them in a row might cause unreasonable results by meteofill)
na_rows <- apply(as.matrix(d[,-1]), 1, function(x) !any(!is.na(x)))
if (any(na_rows)) print(paste0(ranges$name[k], " @ ", d[na_rows, 1], " is NA at all stations!"))
#ofile=paste(odir,"/",ranges$name[k],"_data.dat",sep="")
#write.table(x=d,file=ofile,sep="\t",col.names=TRUE,row.names=FALSE,quote=FALSE)
}
ranges= data.frame(stringsAsFactors=FALSE,
sub_path=c("01_dbExport/out/", "01_dbExport/out/", "02_adjust_timesteps/out/", "01_dbExport/out/", "01_dbExport/out/", "03_sun2globrad/out/"),
name=c("precip","temper","apress","rhumid","windsp","glorad"),
miss=c(     -9999,     -9999,     -9999,     -9999,     -9999,     -9999),
llim=c(       0,     5,     800,       0,       0,       0),
ulim=c(     300,      45,    1100,     100,      60,    400)
)
idir= "/home/tobias/Promotion/Modellierung/ECHSE/preprocessing/03_forcings/"
odir= "/home/tobias/Promotion/Modellierung/ECHSE/preprocessing/03_forcings/04_plausibilityCheck/out/"
show_bad_values= TRUE
# Limits of plausible range for data
ranges= data.frame(stringsAsFactors=FALSE,
sub_path=c("01_dbExport/out/", "01_dbExport/out/", "02_adjust_timesteps/out/", "01_dbExport/out/", "01_dbExport/out/", "03_sun2globrad/out/"),
name=c("precip","temper","apress","rhumid","windsp","glorad"),
miss=c(     -9999,     -9999,     -9999,     -9999,     -9999,     -9999),
llim=c(       0,     5,     800,       0,       0,       0),
ulim=c(     300,      45,    1100,     100,      60,    400)
)
for (k in 1:nrow(ranges)) {
ifile=paste(idir,ranges$sub_path[k],ranges$name[k],"_data.dat",sep="/")
d= read.table(ifile,header=TRUE, sep="\t", stringsAsFactors=FALSE, check.names=FALSE)
for (col in 2:ncol(d)) {
rows= which((d[,col] != ranges$miss[k]) & ((d[,col] < ranges$llim[k]) | (d[,col] > ranges$ulim[k])))
if (length(rows) > 0) {
print(paste(ranges$name[k]," @ ",names(d)[col],": ",length(rows)," implausible values.",sep=""))
if (show_bad_values) {
for (row in rows) {
print(paste(ranges$name[k]," @ ",names(d)[col]," on ",d[row,1],": ",d[row,col],sep=""))
}
}
d[rows,col]= ranges$miss[k]
}
}
# check if there is a row with NA values (many of them in a row might cause unreasonable results by meteofill)
na_rows <- apply(as.matrix(d[,-1]), 1, function(x) !any(!is.na(x)))
if (any(na_rows)) print(paste0(ranges$name[k], " @ ", d[na_rows, 1], " is NA at all stations!"))
ofile=paste(odir,"/",ranges$name[k],"_data.dat",sep="")
write.table(x=d,file=ofile,sep="\t",col.names=TRUE,row.names=FALSE,quote=FALSE)
}
# Limits of plausible range for data
ranges= data.frame(stringsAsFactors=FALSE,
sub_path=c("01_dbExport/out/", "01_dbExport/out/", "02_adjust_timesteps/out/", "01_dbExport/out/", "01_dbExport/out/", "03_sun2globrad/out/"),
name=c("precip","temper","apress","rhumid","windsp","glorad"),
miss=c(     -9999,     -9999,     -9999,     -9999,     -9999,     -9999),
llim=c(       0,     5,     800,       0,       0,       0),
ulim=c(     300,      45,    1100,     100,      60,    400)
)
for (k in 1:nrow(ranges)) {
ifile=paste0(idir,"/",ranges$sub_path[k],"/",ranges$name[k],"_data.dat")
d= read.table(ifile,header=TRUE, sep="\t", stringsAsFactors=FALSE, check.names=FALSE)
for (col in 2:ncol(d)) {
rows= which((d[,col] != ranges$miss[k]) & ((d[,col] < ranges$llim[k]) | (d[,col] > ranges$ulim[k])))
if (length(rows) > 0) {
print(paste(ranges$name[k]," @ ",names(d)[col],": ",length(rows)," implausible values.",sep=""))
if (show_bad_values) {
for (row in rows) {
print(paste(ranges$name[k]," @ ",names(d)[col]," on ",d[row,1],": ",d[row,col],sep=""))
}
}
d[rows,col]= ranges$miss[k]
}
}
# check if there is a row with NA values (many of them in a row might cause unreasonable results by meteofill)
na_rows <- apply(as.matrix(d[,-1]), 1, function(x) !any(!is.na(x)))
if (any(na_rows)) print(paste0(ranges$name[k], " @ ", d[na_rows, 1], " is NA at all stations!"))
ofile=paste(odir,"/",ranges$name[k],"_data.dat",sep="")
write.table(x=d,file=ofile,sep="\t",col.names=TRUE,row.names=FALSE,quote=FALSE)
}
idir= "/home/tobias/Promotion/Modellierung/ECHSE/preprocessing/03_forcings/meteo/"
odir= "/home/tobias/Promotion/Modellierung/ECHSE/preprocessing/03_forcings/meteo/04_plausibilityCheck/out/"
show_bad_values= TRUE
# Limits of plausible range for data
ranges= data.frame(stringsAsFactors=FALSE,
sub_path=c("01_dbExport/out/", "01_dbExport/out/", "02_adjust_timesteps/out/", "01_dbExport/out/", "01_dbExport/out/", "03_sun2globrad/out/"),
name=c("precip","temper","apress","rhumid","windsp","glorad"),
miss=c(     -9999,     -9999,     -9999,     -9999,     -9999,     -9999),
llim=c(       0,     5,     800,       0,       0,       0),
ulim=c(     300,      45,    1100,     100,      60,    400)
)
for (k in 1:nrow(ranges)) {
ifile=paste0(idir,"/",ranges$sub_path[k],"/",ranges$name[k],"_data.dat")
d= read.table(ifile,header=TRUE, sep="\t", stringsAsFactors=FALSE, check.names=FALSE)
for (col in 2:ncol(d)) {
rows= which((d[,col] != ranges$miss[k]) & ((d[,col] < ranges$llim[k]) | (d[,col] > ranges$ulim[k])))
if (length(rows) > 0) {
print(paste(ranges$name[k]," @ ",names(d)[col],": ",length(rows)," implausible values.",sep=""))
if (show_bad_values) {
for (row in rows) {
print(paste(ranges$name[k]," @ ",names(d)[col]," on ",d[row,1],": ",d[row,col],sep=""))
}
}
d[rows,col]= ranges$miss[k]
}
}
# check if there is a row with NA values (many of them in a row might cause unreasonable results by meteofill)
na_rows <- apply(as.matrix(d[,-1]), 1, function(x) !any(!is.na(x)))
if (any(na_rows)) print(paste0(ranges$name[k], " @ ", d[na_rows, 1], " is NA at all stations! Use method described in echse tools 3.6.1 for meteofill!"))
ofile=paste(odir,"/",ranges$name[k],"_data.dat",sep="")
write.table(x=d,file=ofile,sep="\t",col.names=TRUE,row.names=FALSE,quote=FALSE)
}
idir= "/home/tobias/Promotion/Modellierung/ECHSE/preprocessing/03_forcings/meteo/"
odir= "/home/tobias/Promotion/Modellierung/ECHSE/preprocessing/03_forcings/meteo/04_plausibilityCheck/out/"
show_bad_values= TRUE
# Limits of plausible range for data
ranges= data.frame(stringsAsFactors=FALSE,
sub_path=c("01_dbExport/out/", "01_dbExport/out/", "02_adjust_timesteps/out/", "01_dbExport/out/", "01_dbExport/out/", "03_sun2globrad/out/", "01_dbExport/out/"),
name=c("precip","temper","apress","rhumid","windsp","glorad", "sunshine"),
miss=c(     -9999,     -9999,     -9999,     -9999,     -9999,     -9999),
llim=c(       0,     5,     800,       0,       0,       0),
ulim=c(     300,      45,    1100,     100,      60,    400)
)
for (k in 1:nrow(ranges)) {
ifile=paste0(idir,"/",ranges$sub_path[k],"/",ranges$name[k],"_data.dat")
d= read.table(ifile,header=TRUE, sep="\t", stringsAsFactors=FALSE, check.names=FALSE)
for (col in 2:ncol(d)) {
rows= which((d[,col] != ranges$miss[k]) & ((d[,col] < ranges$llim[k]) | (d[,col] > ranges$ulim[k])))
if (length(rows) > 0) {
print(paste(ranges$name[k]," @ ",names(d)[col],": ",length(rows)," implausible values.",sep=""))
if (show_bad_values) {
for (row in rows) {
print(paste(ranges$name[k]," @ ",names(d)[col]," on ",d[row,1],": ",d[row,col],sep=""))
}
}
d[rows,col]= ranges$miss[k]
}
}
# check if there is a row with NA values (many of them in a row might cause unreasonable results by meteofill)
na_rows <- apply(as.matrix(d[,-1]), 1, function(x) !any(!is.na(x)))
if (any(na_rows)) print(paste0(ranges$name[k], " @ ", d[na_rows, 1], " is NA at all stations! Use method described in echse tools 3.6.1 for meteofill!"))
ofile=paste(odir,"/",ranges$name[k],"_data.dat",sep="")
write.table(x=d,file=ofile,sep="\t",col.names=TRUE,row.names=FALSE,quote=FALSE)
}
ranges
idir= "/home/tobias/Promotion/Modellierung/ECHSE/preprocessing/03_forcings/meteo/"
odir= "/home/tobias/Promotion/Modellierung/ECHSE/preprocessing/03_forcings/meteo/04_plausibilityCheck/out/"
show_bad_values= TRUE
# Limits of plausible range for data
ranges= data.frame(stringsAsFactors=FALSE,
sub_path=c("01_dbExport/out/", "01_dbExport/out/", "02_adjust_timesteps/out/", "01_dbExport/out/", "01_dbExport/out/", "03_sun2globrad/out/", "01_dbExport/out/"),
name=c("precip","temper","apress","rhumid","windsp","glorad", "sunshine"),
miss=c(     -9999,     -9999,     -9999,     -9999,     -9999,     -9999, -9999),
llim=c(       0,     5,     800,       0,       0,       0, 0),
ulim=c(     300,      45,    1100,     100,      60,    400, 13)
)
ranges
for (k in 1:nrow(ranges)) {
ifile=paste0(idir,"/",ranges$sub_path[k],"/",ranges$name[k],"_data.dat")
d= read.table(ifile,header=TRUE, sep="\t", stringsAsFactors=FALSE, check.names=FALSE)
for (col in 2:ncol(d)) {
rows= which((d[,col] != ranges$miss[k]) & ((d[,col] < ranges$llim[k]) | (d[,col] > ranges$ulim[k])))
if (length(rows) > 0) {
print(paste(ranges$name[k]," @ ",names(d)[col],": ",length(rows)," implausible values.",sep=""))
if (show_bad_values) {
for (row in rows) {
print(paste(ranges$name[k]," @ ",names(d)[col]," on ",d[row,1],": ",d[row,col],sep=""))
}
}
d[rows,col]= ranges$miss[k]
}
}
# check if there is a row with NA values (many of them in a row might cause unreasonable results by meteofill)
na_rows <- apply(as.matrix(d[,-1]), 1, function(x) !any(!is.na(x)))
if (any(na_rows)) print(paste0(ranges$name[k], " @ ", d[na_rows, 1], " is NA at all stations! Use method described in echse tools 3.6.1 for meteofill!"))
ofile=paste(odir,"/",ranges$name[k],"_data.dat",sep="")
write.table(x=d,file=ofile,sep="\t",col.names=TRUE,row.names=FALSE,quote=FALSE)
}
rm(list=ls())
idir= "/home/tobias/Promotion/Modellierung/ECHSE/preprocessing/03_forcings/meteo/"
odir= "/home/tobias/Promotion/Modellierung/ECHSE/preprocessing/03_forcings/meteo/04_plausibilityCheck/out/"
show_bad_values= TRUE
# Limits of plausible range for data
ranges= data.frame(stringsAsFactors=FALSE,
sub_path=c("01_dbExport/out/", "01_dbExport/out/", "02_adjust_timesteps/out/", "01_dbExport/out/", "01_dbExport/out/", "03_sun2globrad/out/", "01_dbExport/out/"),
name=c("precip","temper","apress","rhumid","windsp","glorad", "sunshine"),
miss=c(     -9999,     -9999,     -9999,     -9999,     -9999,     -9999, -9999),
llim=c(       0,     5,     800,       0,       0,       0, 0),
ulim=c(     300,      45,    1100,     100,      60,    400, 13)
)
for (k in 1:nrow(ranges)) {
ifile=paste0(idir,"/",ranges$sub_path[k],"/",ranges$name[k],"_data.dat")
d= read.table(ifile,header=TRUE, sep="\t", stringsAsFactors=FALSE, check.names=FALSE)
for (col in 2:ncol(d)) {
rows= which((d[,col] != ranges$miss[k]) & ((d[,col] < ranges$llim[k]) | (d[,col] > ranges$ulim[k])))
if (length(rows) > 0) {
print(paste(ranges$name[k]," @ ",names(d)[col],": ",length(rows)," implausible values.",sep=""))
if (show_bad_values) {
for (row in rows) {
print(paste(ranges$name[k]," @ ",names(d)[col]," on ",d[row,1],": ",d[row,col],sep=""))
}
}
d[rows,col]= ranges$miss[k]
}
}
# check if there is a row with NA values (many of them in a row might cause unreasonable results by meteofill)
na_rows <- apply(as.matrix(d[,-1]), 1, function(x) !any(!is.na(x)))
if (any(na_rows)) print(paste0(ranges$name[k], " @ ", d[na_rows, 1], " is NA at all stations! Use method described in echse tools 3.6.1 for meteofill!"))
ofile=paste(odir,"/",ranges$name[k],"_data.dat",sep="")
write.table(x=d,file=ofile,sep="\t",col.names=TRUE,row.names=FALSE,quote=FALSE)
}
rm(list=ls())
idir= "/home/tobias/Promotion/Modellierung/ECHSE/preprocessing/03_forcings/meteo/"
odir= "/home/tobias/Promotion/Modellierung/ECHSE/preprocessing/03_forcings/meteo/04_plausibilityCheck/out/"
show_bad_values= TRUE
# Limits of plausible range for data
ranges= data.frame(stringsAsFactors=FALSE,
sub_path=c("01_dbExport/out/", "01_dbExport/out/", "02_adjust_timesteps/out/", "01_dbExport/out/", "01_dbExport/out/", "03_sun2globrad/out/", "01_dbExport/out/"),
name=c("precip","temper","apress","rhumid","windsp","glorad", "sunshine"),
miss=c(     -9999,     -9999,     -9999,     -9999,     -9999,     -9999, -9999),
llim=c(       0,     5,     800,       0,       0,       0, 0),
ulim=c(     300,      45,    1100,     100,      60,    400, 13)
)
for (k in 1:nrow(ranges)) {
ifile=paste0(idir,"/",ranges$sub_path[k],"/",ranges$name[k],"_data.dat")
d= read.table(ifile,header=TRUE, sep="\t", stringsAsFactors=FALSE, check.names=FALSE)
for (col in 2:ncol(d)) {
rows= which((d[,col] != ranges$miss[k]) & ((d[,col] < ranges$llim[k]) | (d[,col] > ranges$ulim[k])))
if (length(rows) > 0) {
print(paste(ranges$name[k]," @ ",names(d)[col],": ",length(rows)," implausible values.",sep=""))
if (show_bad_values) {
for (row in rows) {
print(paste(ranges$name[k]," @ ",names(d)[col]," on ",d[row,1],": ",d[row,col],sep=""))
}
}
d[rows,col]= ranges$miss[k]
}
}
# check if there is a row with NA values (many of them in a row might cause unreasonable results by meteofill)
na_rows <- apply(as.matrix(d[,-1]), 1, function(x) !any(!is.na(x)))
if (any(na_rows)) print(paste0(ranges$name[k], " @ ", d[na_rows, 1], " is NA at all stations! Use method described in echse tools 3.6.1 for meteofill!"))
ofile=paste(odir,"/",ranges$name[k],"_data.dat",sep="")
write.table(x=d,file=ofile,sep="\t",col.names=TRUE,row.names=FALSE,quote=FALSE)
}
rm(list=ls())
idir= "/home/tobias/Promotion/Modellierung/ECHSE/preprocessing/03_forcings/meteo/"
odir= "/home/tobias/Promotion/Modellierung/ECHSE/preprocessing/03_forcings/meteo/04_plausibilityCheck/out/"
show_bad_values= TRUE
# Limits of plausible range for data
ranges= data.frame(stringsAsFactors=FALSE,
sub_path=c("01_dbExport/out/", "01_dbExport/out/", "02_adjust_timesteps/out/", "01_dbExport/out/", "01_dbExport/out/", "03_sun2globrad/out/", "01_dbExport/out/"),
name=c("precip","temper","apress","rhumid","windsp","glorad", "sunshine"),
miss=c(     -9999,     -9999,     -9999,     -9999,     -9999,     -9999, -9999),
llim=c(       0,     5,     800,       0,       0,       0, 0),
ulim=c(     300,      45,    1100,     100,      60,    400, 13)
)
for (k in 1:nrow(ranges)) {
ifile=paste0(idir,"/",ranges$sub_path[k],"/",ranges$name[k],"_data.dat")
d= read.table(ifile,header=TRUE, sep="\t", stringsAsFactors=FALSE, check.names=FALSE)
for (col in 2:ncol(d)) {
rows= which((d[,col] != ranges$miss[k]) & ((d[,col] < ranges$llim[k]) | (d[,col] > ranges$ulim[k])))
if (length(rows) > 0) {
print(paste(ranges$name[k]," @ ",names(d)[col],": ",length(rows)," implausible values.",sep=""))
if (show_bad_values) {
for (row in rows) {
print(paste(ranges$name[k]," @ ",names(d)[col]," on ",d[row,1],": ",d[row,col],sep=""))
}
}
d[rows,col]= ranges$miss[k]
}
}
# check if there is a row with NA values (many of them in a row might cause unreasonable results by meteofill)
na_rows <- apply(as.matrix(d[,-1]), 1, function(x) !any(!is.na(x)))
if (any(na_rows)) print(paste0(ranges$name[k], " @ ", d[na_rows, 1], " is NA at all stations! Use method described in echse tools 3.6.1 for meteofill!"))
ofile=paste(odir,"/",ranges$name[k],"_data.dat",sep="")
write.table(x=d,file=ofile,sep="\t",col.names=TRUE,row.names=FALSE,quote=FALSE)
}
rm(list=ls())
idir= "/home/tobias/Promotion/Modellierung/ECHSE/preprocessing/03_forcings/meteo/"
odir= "/home/tobias/Promotion/Modellierung/ECHSE/preprocessing/03_forcings/meteo/04_plausibilityCheck/out/"
show_bad_values= TRUE
# Limits of plausible range for data
ranges= data.frame(stringsAsFactors=FALSE,
sub_path=c("01_dbExport/out/", "01_dbExport/out/", "02_adjust_timesteps/out/", "01_dbExport/out/", "01_dbExport/out/", "03_sun2globrad/out/", "01_dbExport/out/"),
name=c("precip","temper","apress","rhumid","windsp","glorad", "sunshine"),
miss=c(     -9999,     -9999,     -9999,     -9999,     -9999,     -9999, -9999),
llim=c(       0,     5,     800,       0,       0,       0, 0),
ulim=c(     300,      45,    1100,     100,      60,    400, 13)
)
k=1
k=2
ifile=paste0(idir,"/",ranges$sub_path[k],"/",ranges$name[k],"_data.dat")
d= read.table(ifile,header=TRUE, sep="\t", stringsAsFactors=FALSE, check.names=FALSE)
for (col in 2:ncol(d)) {
rows= which((d[,col] != ranges$miss[k]) & ((d[,col] < ranges$llim[k]) | (d[,col] > ranges$ulim[k])))
if (length(rows) > 0) {
print(paste(ranges$name[k]," @ ",names(d)[col],": ",length(rows)," implausible values.",sep=""))
if (show_bad_values) {
for (row in rows) {
print(paste(ranges$name[k]," @ ",names(d)[col]," on ",d[row,1],": ",d[row,col],sep=""))
}
}
d[rows,col]= ranges$miss[k]
}
}
na_rows <- apply(as.matrix(d[,-1]), 1, function(x) !any(!is.na(x)))
na_rows
any(na_rows)
str(d)
k
na_rows <- apply(as.matrix(d[,-1]), 1, function(x) !any(!(x == ranges$miss[k])))
any(na_rows)
if (any(na_rows)) print(paste0(ranges$name[k], " @ ", d[na_rows, 1], " is NA at all stations! Use method described in echse tools 3.6.1 for meteofill!"))
STR(na_rows)
str(na_rows)
str(which(na_rows))
length(which(na_rows))<100
if (any(na_rows) & (length(which(na_rows))<=100)) print(paste0(ranges$name[k], " @ ", d[na_rows, 1], " is NA at all stations! Consider the method described in echse tools 3.6.1 for meteofill!"))
if (any(na_rows) & (length(which(na_rows))>100)) print(paste0(ranges$name[k], " contains many timesteps with NA values at all stations! Use method described in echse tools 3.6.1 for meteofill!"))
rm(list=ls())
idir= "/home/tobias/Promotion/Modellierung/ECHSE/preprocessing/03_forcings/meteo/"
odir= "/home/tobias/Promotion/Modellierung/ECHSE/preprocessing/03_forcings/meteo/04_plausibilityCheck/out/"
show_bad_values= TRUE
# Limits of plausible range for data
ranges= data.frame(stringsAsFactors=FALSE,
sub_path=c("01_dbExport/out/", "01_dbExport/out/", "02_adjust_timesteps/out/", "01_dbExport/out/", "01_dbExport/out/", "03_sun2globrad/out/", "01_dbExport/out/"),
name=c("precip","temper","apress","rhumid","windsp","glorad", "sunshine"),
miss=c(     -9999,     -9999,     -9999,     -9999,     -9999,     -9999, -9999),
llim=c(       0,     5,     800,       0,       0,       0, 0),
ulim=c(     300,      45,    1100,     100,      60,    400, 13)
)
for (k in 1:nrow(ranges)) {
ifile=paste0(idir,"/",ranges$sub_path[k],"/",ranges$name[k],"_data.dat")
d= read.table(ifile,header=TRUE, sep="\t", stringsAsFactors=FALSE, check.names=FALSE)
for (col in 2:ncol(d)) {
rows= which((d[,col] != ranges$miss[k]) & ((d[,col] < ranges$llim[k]) | (d[,col] > ranges$ulim[k])))
if (length(rows) > 0) {
print(paste(ranges$name[k]," @ ",names(d)[col],": ",length(rows)," implausible values.",sep=""))
if (show_bad_values) {
for (row in rows) {
print(paste(ranges$name[k]," @ ",names(d)[col]," on ",d[row,1],": ",d[row,col],sep=""))
}
}
d[rows,col]= ranges$miss[k]
}
}
# check if there is a row with NA values (many of them in a row might cause unreasonable results by meteofill)
na_rows <- apply(as.matrix(d[,-1]), 1, function(x) !any(!(x == ranges$miss[k])))
if (any(na_rows) & (length(which(na_rows))<=100)) print(paste0(ranges$name[k], " @ ", d[na_rows, 1], " is NA at all stations! Consider the method described in echse tools 3.6.1 for meteofill!"))
if (any(na_rows) & (length(which(na_rows))>100)) print(paste0(ranges$name[k], " contains many timesteps with NA values at all stations! Use method described in echse tools 3.6.1 for meteofill!"))
ofile=paste(odir,"/",ranges$name[k],"_data.dat",sep="")
write.table(x=d,file=ofile,sep="\t",col.names=TRUE,row.names=FALSE,quote=FALSE)
}
k=1
ifile=paste0(idir,"/",ranges$sub_path[k],"/",ranges$name[k],"_data.dat")
rm(list=ls())
idir= "/home/tobias/Promotion/Modellierung/ECHSE/preprocessing/03_forcings/meteo/"
odir= "/home/tobias/Promotion/Modellierung/ECHSE/preprocessing/03_forcings/meteo/04_plausibilityCheck/out/"
show_bad_values= TRUE
# specify variables and paths to files where a virtual station shall be introduces
variables= data.frame(stringsAsFactors=FALSE,
sub_path=c("01_dbExport/out/", "01_dbExport/out/", "02_adjust_timesteps/out/", "01_dbExport/out/", "01_dbExport/out/", "03_sun2globrad/out/", "01_dbExport/out/"),
name=c("precip","temper","apress","rhumid","windsp","glorad", "sunshine"),
stat_path=c("01_dbExport/out/", "01_dbExport/out/", "01_dbExport/out/", "01_dbExport/out/", "01_dbExport/out/", "01_dbExport/out/", "01_dbExport/out/"),
miss=c(     -9999,     -9999,     -9999,     -9999,     -9999,     -9999, -9999)
)
ifile=paste0(idir,"/",ranges$sub_path[k],"/",ranges$name[k],"_data.dat")
ifile=paste0(idir,"/",variables$sub_path[k],"/",variables$name[k],"_data.dat")
k=1
ifile=paste0(idir,"/",variables$sub_path[k],"/",variables$name[k],"_data.dat")
d= read.table(ifile,header=TRUE, sep="\t", stringsAsFactors=FALSE, check.names=FALSE)
View(d)
str(d)
library(xts)
d= as.xts(read.zoo(ifile,header=TRUE, sep="\t", stringsAsFactors=FALSE, check.names=FALSE))
str(d)
?apply.monthly
test <- apply.monthly(d, sum, na.rm=T)
View(test)
str(test)
test <- apply.monthly(d, mean, na.rm=T)
str(test)
str(d)
View(test)
?read.table
d= as.xts(read.zoo(ifile,header=TRUE, sep="\t", stringsAsFactors=FALSE, check.names=FALSE, na.strings=variables$miss[k]))
str(d)
test <- apply.monthly(d, mean, na.rm=T)
View(test)
test <- apply.monthly(d, mean)
View(test)
plot(test[,1])
plot(test[,500])
plot(test[,400])
plot(test[,100])
plot(test[,400])
plot(test[,100])
variables$name[k] == "precip"
monthly_means <- apply.monthly(d, mean)
means_stations <- apply(monthly_means, 1, mean, na.rm=T)
str(means_stations)
plot(means_stations)
str(means_stations, type="l")
plot(means_stations, type="l")
monthly_means <- apply.monthly(d, sum)
View(monthly_means)
str(means_stations)
k
k=2
ifile=paste0(idir,"/",variables$sub_path[k],"/",variables$name[k],"_data.dat")
d= as.xts(read.zoo(ifile,header=TRUE, sep="\t", stringsAsFactors=FALSE, check.names=FALSE, na.strings=variables$miss[k]))
variables$name[k] == "temper"
daily_means <- apply.daily(d, mean)
str(daily_means)
?aggregate.zoo
daily_means <- aggregate(d, by=list(days=format(index(d), "%j")), mean)
str(daily_means)
daily_means
daily_means <- aggregate(d, by=list(days=format(index(d), "%j")), mean, na.rm=T)
str(daily_means)
plot(daily_means[,1])
plot(daily_means[,2])
plot(daily_means[,3])
plot(daily_means[,4])
str(daily_means)
daily_means <- apply(daily_means, 2, mean)
plot(daily_means)
plot(daily_means, type="l")
str(daily_means)
daily_means <- aggregate(d, by=list(days=format(index(d), "%j")), mean, na.rm=T)
str(daily_means)
daily_means <- apply(daily_means, 1, mean)
plot(daily_means, type="l")
str(d)
index_doy <- format(index(d), "%j")
str(index_doy)
str(daily_means)
index_doy <- data.frame(doy=format(index(d), "%j"))
str(index_doy)
index_doy <- data.frame(doy=as.numeric(format(index(d), "%j")))
str(index_doy)
index_doy
str(daily_means)
names(daily_means)
means_stations <- data.frame(dat=apply(monthly_means, 1, mean, na.rm=T),
doy=1:366)
daily_means <- data.frame(val=apply(daily_means, 1, mean),
doy=1:366)
daily_means <- aggregate(d, by=list(days=format(index(d), "%j")), mean, na.rm=T)
daily_means <- data.frame(val=apply(daily_means, 1, mean),
doy=1:366)
str(daily_means)
dat <- merge(index_doy, daily_means)
str(dat)
?merge
dat <- merge(index_doy, daily_means, sort=F)
str(dat)
str(index_doy)
as.numeric(format(index(d), "%j"))[1]
?tail
tail(c(1:6))
tail(c(1:6), n=1)
tail(as.numeric(format(index(d), "%j")), n=1)
doy_start <- as.numeric(format(index(d), "%j"))[1]
doy_end <- tail(as.numeric(format(index(d), "%j")), n=1)
rm(list=ls())
idir= "/home/tobias/Promotion/Modellierung/ECHSE/preprocessing/03_forcings/meteo/"
odir= "/home/tobias/Promotion/Modellierung/ECHSE/preprocessing/03_forcings/meteo/04_plausibilityCheck/out/"
show_bad_values= TRUE
# Limits of plausible range for data
ranges= data.frame(stringsAsFactors=FALSE,
sub_path=c("01_dbExport/out/", "01_dbExport/out/", "02_adjust_timesteps/out/", "01_dbExport/out/", "01_dbExport/out/", "03_sun2globrad/out/", "01_dbExport/out/"),
name=c("precip","temper","apress","rhumid","windsp","glorad", "sunshine"),
miss=c(     -9999,     -9999,     -9999,     -9999,     -9999,     -9999, -9999),
llim=c(       0,     5,     800,       0,       0,       0, 0),
ulim=c(     300,      45,    1100,     100,      60,    400, 13)
)
for (k in 1:nrow(ranges)) {
ifile=paste0(idir,"/",ranges$sub_path[k],"/",ranges$name[k],"_data.dat")
d= read.table(ifile,header=TRUE, sep="\t", stringsAsFactors=FALSE, check.names=FALSE)
for (col in 2:ncol(d)) {
rows= which((d[,col] != ranges$miss[k]) & ((d[,col] < ranges$llim[k]) | (d[,col] > ranges$ulim[k])))
if (length(rows) > 0) {
print(paste(ranges$name[k]," @ ",names(d)[col],": ",length(rows)," implausible values.",sep=""))
if (show_bad_values) {
for (row in rows) {
print(paste(ranges$name[k]," @ ",names(d)[col]," on ",d[row,1],": ",d[row,col],sep=""))
}
}
d[rows,col]= ranges$miss[k]
}
}
# check if there is a row with NA values (many of them in a row might cause unreasonable results by meteofill)
na_rows <- apply(as.matrix(d[,-1]), 1, function(x) !any(!(x == ranges$miss[k])))
if (any(na_rows) & (length(which(na_rows))<=100)) print(paste0(ranges$name[k], " @ ", d[na_rows, 1], " is NA at all stations! Consider the method described in echse tools 3.6.1 for meteofill!"))
if (any(na_rows) & (length(which(na_rows))>100)) print(paste0(ranges$name[k], " contains many timesteps with NA values at all stations! Use method described in echse tools 3.6.1 for meteofill!"))
ofile=paste(odir,"/",ranges$name[k],"_data.dat",sep="")
write.table(x=d,file=ofile,sep="\t",col.names=TRUE,row.names=FALSE,quote=FALSE)
}
